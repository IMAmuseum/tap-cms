<?php

module_load_include('inc', 'tap', 'tap.forms');

/************************************
 * Drupal Hooks
 */

/**
 * Implements hook_permission()
 */
function tap_permission() {
    return array(
        'administer tap' => array(
            'title'         => t('Administer Tap'),
            'description'   => t('Perform administration tasks for TAP'),
        ),
    );
}

/**
 * Implements hook_menu()
 */
function tap_menu() {

    $items['node/%node/tourml_xml'] = array(
        'title'             => 'TourML XML',
        'page callback'     => 'tap_tourml_preview',
        'page arguments'    => array(1),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
    );
  
    $items['node/%node/tourml'] = array(
        'title'             => 'TourML',
        'page callback'     => 'tap_tourml_render',
        'page arguments'    => array(1),
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_node_view()
 */
function tap_node_view($node, $view_mode, $lang) {
    switch($view_mode) {
        case 'full':
            tap_node_view_full($node, $lang);
            break;
    }
}

function tap_node_view_full(&$node, $lang) {
    if ($node->type == 'tour') {
        $node->content['tourml'] = drupal_get_form('tap_export_tourml_form', $node);
    }
}

/******************************
 * Entities 
 */

/**
 * Implements hook_entity_info_alter()
 */
function tap_entity_info_alter(&$entity_info) {
    foreach($entity_info as $type => $entity) {
        $entity_info[$type]['view modes']['tourml_xml'] = array(
            'label'             => t('TourML XML'),
            'custom settings'   => TRUE,
        ); 
    }
}

function tap_theme() {
    $properties = array(
        'variables' => array(
            'items' => array(),
        ),
        'file'  => 'tap.templates.inc',
    );

    return array(
        /**
         * Tour
         */
        'tap_tourml_tour' => array(
            'variables' => array(
                'id'    => 0,
                'tour'  => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-tour',
        ),        
        /**
         * Stop
         */
        'tap_tourml_stop' => array(
            'variables' => array(
                'id' => 0,
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-stop',
        ),
        /**
         * Properties
         */
        'tap_tourml_property' => array(
            'variables' => array(
                'name'          => '',
                'value'         => '',
                'attributes'    => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-property',
        ),
        'tap_tourml_property_set' => array(
            'variables' => array(
                'properties' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-property-set',
        ),
        'tap_tourml_property_list_boolean'              => $properties, 
        'tap_tourml_property_datetime'                  => $properties,
        'tap_tourml_property_date'                      => $properties,
        'tap_tourml_property_datestamp'                 => $properties, 
        'tap_tourml_property_number_decimal'            => $properties,
        'tap_tourml_property_number_float'              => $properties, 
        'tap_tourml_property_number_integer'            => $properties, 
        'tap_tourml_property_list_float'                => $properties, 
        'tap_tourml_property_list_integer'              => $properties, 
        'tap_tourml_property_list_text'                 => $properties,
        'tap_tourml_property_text'                      => $properties, 
        'tap_tourml_property_text_long'                 => $properties,
        'tap_tourml_property_taxonomy_term_reference'   => $properties,
        /**
         * Title
         */
        'tap_tourml_title' => array(
            'variables' => array(
                'language'  => 'en',
                'value'     => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-title',
        ),
        'tap_tourml_title_text'         => $properties, 
        'tap_tourml_title_text_long'    => $properties,
        /**
         * Description
         */
        'tap_tourml_description' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-description',
        ),
        'tap_tourml_description_text'               => $properties,
        'tap_tourml_description_text_long'          => $properties,
        'tap_tourml_description_text_with_summary'  => $properties,
        /**
         * Assets
         */
        'tap_tourml_asset' => array(
            'variables' => array(
                'asset' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-asset',
        ),
        'tap_tourml_asset_ref' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-asset-file',
        ),
        'tap_tourml_asset_file'     => $properties,
        'tap_tourml_asset_image'    => $properties, 
        /**
         * Connections
         */
        'tap_tourml_connection_node_reference' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-connection-node-reference',
        ),
    );
}

/**
 * Implements hook_tourml_asset_properties()
 */
function tap_tourml_asset_properties($item) {
    list($type, $ext) = explode('/', $item['filemime']);
    switch($type) {
        case 'image':
            return _tap_asset_image($item);
    }
}

/******************************
 * Fields 
 */

/**
 * Implements hook_field_formatter_info()
 */
function tap_field_formatter_info() {
    $formatters = array(
        'tap_tourml_connection' => array(
            'label'         => t('TourML Connection'),
            'field types'   => array(),
            'module'        => 'tap',
        ),
        'tap_tourml_property' => array(
            'label'         => t('TourML Property'),
            'field types'   => array(),
            'module'        => 'tap',
        ),
        'tap_tourml_asset' => array(
            'label'         => t('TourML Asset'),
            'field types'   => array(),
            'module'        => 'tap',
        ),
        'tap_tourml_title' => array(
            'label'         => t('TourML Title'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
            'module'        => 'tap',
        ),
        'tap_tourml_description' => array(
            'label'         => t('TourML Description'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
            'module'        => 'tap',
        ),
        'tap_tourml_copyright' => array(
            'label'         => t('TourML Copyright'),
            'field types'   => array('text', 'list_text', 'text_long', 'text_with_summary'),
            'module'        => 'tap',
        ),
        'tap_tourml_credit_line' => array(
            'label'         => t('TourML Credit Line'),
            'field types'   => array('text', 'list_text', 'text_long', 'text_with_summary'),
            'module'        => 'tap',
        ),
        'tap_tourml_machine_rights' => array(
            'label'         => t('TourML Machine Rights'),
            'field types'   => array('text', 'list_text', 'text_long', 'text_with_summary'),
            'module'        => 'tap',
        ),
        'tap_tourml_expiration' => array(
            'label'         => t('TourML Expiration'),
            'field types'   => array('date', 'datestamp', 'datetime'),
            'module'        => 'tap',
        ),
        'tap_tourml_watermark' => array(
            'label'         => t('TourML Watermark'),
            'field types'   => array(),
            'module'        => 'tap',
        ),
    );
    return $formatters;
}

function tap_field_formatter_info_alter(&$info)
{
    $types = array();
    $usableFormatters = array();
    foreach($info as $name => $formatter)
    {
        $types = array_merge($types, $formatter['field types']);
        if (strpos($name, 'tap_tourml_') !== false) 
        {
            $usableFormatters[] = $name;
        }
    }
    $types = array_values(array_unique($types));
 
    foreach($usableFormatters as $name)
    {
        $info[$name]['field types'] = $types;
    }
}

/**
 * Implements hook_field_display_alter()
 */
function tap_field_display_alter(&$display, $context) {
    switch($context['view_mode']) {
        case 'tourml_xml':
            // Override the field formatter with our tap formatter
            if (strpos($display['type'], 'tap_tourml_') !== false)
            {
                //$display['type'] = $display['type'] . '_' . $context['field']['type'];
            } else {
                $display['type'] = 'hidden';
            }
            $display['module']  = 'tap';
            break;
    }
}

/**
 * Implements hook_field_formatter_view()
 */
function tap_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element['#theme'] = $display['type'] . '_' . $field['type'];
    return $element;
}

/******************************
 * Blocks
 */

/**
 * Implements hook_block_info()
 */
function tap_block_info() {
  $blocks['addstop'] = array(
    'info' => t('Add Stop'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function tap_block_view($delta = '') {
  switch ($delta) {
    case 'addstop':
      $block['subject'] = t('Add Stop');
      $block['content'] = tap_block_contents($delta);
      break;
  }
  return $block;
}

function tap_block_contents($delta) {
  switch ($delta) {
    case 'addstop':

      $options = array();
//    $options = (arg(0) == 'node' && is_numeric(arg(1))) ? array('query' => 'destination='.$_GET['q']) : array();
      $links = array(
        l('Image Stop', 'node/add/tour-image-stop', $options),
        l('Video Stop', 'node/add/tour-video-stop', $options),
        l('Audio Stop', 'node/add/tour-audio-stop', $options),
        l('Stop Group', 'node/add/tour-stop-group', $options),
      );
      return array('#markup' => theme('item_list', array('items' => $links)));
  }
}


/*****************************
 * Helper functions
 ****************************/

/**
 * @param $node
 * A node object
 * @return
 * Returns a rendered TourML string
 */
function tap_tourml_render($node)
{
    module_load_include('inc', 'tap', 'includes/tourml.class');

    $tourml = new TourML($node->nid);

    //pretty up the output
    $doc = new DOMDocument();
    $doc->formatOutput = true;
    $doc->preserveWhiteSpace = false;
    $doc->loadXML($tourml->getTourML());

    return $doc->saveXML();
}

/**
 * @param $node
 * A node object
 * @return
 * Returns a rendered TourML page 
 */
function tap_tourml_preview($node)
{
    $tourml = tap_tourml_render($node);
    return '<pre class="brush: xml">' . htmlentities($tourml) . '</pre>';
}

function _anti_field($text) {
    return str_replace('field_', '', $text);
}

function _tap_asset_image($item) {
    $path = drupal_realpath($item['uri']);
    $attr = image_get_info($path);
    return array(
        array(
            'name'    => 'width',
            'value' => $attr['width'],
        ),
        array(
            'name'    => 'height',
            'value' => $attr['height'],
        ),
    );

}
