<?php

/**
 * @file
 * Code for the TAP Base feature.
 */

include_once 'tap.features.inc';

module_load_include('inc', 'tap', 'tap.forms');

/************************************
 * Drupal Hooks
 */

/**
 * Implements hook_uninstall()
 */
function tap_uninstall() {
    db_query("DELETE FROM {variable} WHERE name LIKE '%s%%'", 'tap_');
}

/**
 * Implements hook_requirements()
 */
function tap_requirements($phase) {
    if ($phase == 'runtime') {
        $severity   = (extension_loaded('ffmpeg')) ? REQUIREMENT_OK : REQUIREMENT_WARNING;
        $value      = ($severity == REQUIREMENT_OK) ? 'Enabled' : 'Disabled';

        $requirements['tap_ffmpeg'] = array(
            'title'         => t('Tap FFMPEG'),
            'description'   => t('To retrieve information about videos TAP requires that the ffmpeg extension be installed.
                you can download it from <a href="http://http://ffmpeg-php.sourceforge.net/">here</a>'),
            'severity'      => $severity,
            'value'         => $value,
        );

        return $requirements;
    }
}

/**
 * Implements hook_permission()
 */
function tap_permission() {
    return array(
        'administer tap' => array(
            'title'         => t('Administer Tap'),
            'description'   => t('Perform administration tasks for TAP'),
        ),
    );
}

/**
 * Implements hook_menu()
 */
function tap_menu() {
    $items['admin/content/tourml-export'] = array(
        'title'             => 'TourML Export',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_tourml_export_form'),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap.export.inc',
    );

    $items['node/%node/tourml-export'] = array(
        'title'             => 'TourML Export',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_tourml_export_form', 1),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap.export.inc',
    );

    $items['admin/content/tourml-export/autocomplete'] = array(
        'page callback'     => 'tap_export_entity_autocomplete',
        'access arguments'  => array('administer tap'),
        'type'              => MENU_CALLBACK,
        'file'              => 'tap.export.inc',
    );

    $items['node/%node/tourml'] = array(
        'title'             => 'TourML XML',
        'page callback'     => 'tap_tourml_preview',
        'page arguments'    => array(1),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
    );

    $items['node/%node/tourml.xml'] = array(
        'title'             => 'TourML',
        'page callback'     => 'tap_export_tourml',
        'page arguments'    => array(1, FALSE),
        'access arguments'  => array('access content'),
        'type'              => MENU_CALLBACK,
        'file'              => 'tap.export.inc',
    );

    $items['node/%node/validate'] = array(
        'title'             => 'TourML Validate',
        'page callback'     => 'tap_tourml_node_validate',
        'page arguments'    => array(1),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
    );

    $items['tourml/validate'] = array(
        'title'             => 'Validate TourML',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_tourml_validate_form'),
        'access arguments'  => array('access content'),
        'type'              => MENU_LOCAL_TASK,
    );  

    $items['admin/tap'] = array(
        'title'             => 'Tap',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_admin_form'),
        'access arguments'  => array('administer tap'),
        'file' => 'tap.admin.inc',
    );

    $items['admin/tap/settings'] = array(
        'title' => 'Settings',
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    return $items;
}

/**
 * Implements hook_node_presave().
 */
function tap_node_presave($node) {
    // attempt to clear the node's tourml cache
    cache_clear_all('tourml-' . $node->nid, 'cache');
    $field = variable_get('tap_connection_field', NULL);
    // if sibling stop, attempt to clear out the tour cache
    if ($field && !empty($node->$field)) {
        $tour = $node->$field;
        if (!empty($tour['und'])) {
            cache_clear_all('tourml-' . $tour['und'][0]['target_id'], 'cache');
        }
    }
}

/**
 * Implements hook_node_view()
 */
function tap_node_view($node, $view_mode, $lang) {
    switch ($view_mode) {
        case 'full':
            tap_node_view_full($node, $lang);
            break;
    }
}

function tap_node_view_full(&$node, $lang) {
    if ($node->type == 'tour') {
        // Render export form
        $node->content['tourml'] = drupal_get_form('tap_export_tourml_form', $node);

        // Render tour stops
        $view = views_get_view('tour_stops');
        $view->use_ajax = TRUE;
        $view->set_arguments(array($node->nid));
        $node->content['tour_stops'] = array(
            '#markup'   => $view->preview(),
        );
    }
}

/******************************
 * Entities
 */

/**
 * Implements hook_entity_info_alter()
 */
function tap_entity_info_alter(&$entity_info) {
    foreach ($entity_info as $type => $entity) {
        $entity_info[$type]['view modes']['tourml_xml'] = array(
            'label'             => t('TourML XML'),
            'custom settings'   => TRUE,
        );
    }
}

/**
 * Implements hook_theme()
 */
function tap_theme() {
    $properties = array(
        'variables' => array(
            'items' => array(),
        ),
        'file'  => 'tap.templates.inc',
    );

    return array(
        /**
         * Tour
         */
        'tap_tourml_tour' => array(
            'variables' => array(
                'id'    => 0,
                'tour'  => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-tour',
        ),
        'tap_tourml_root_stop_entityreference' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'      => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-root-stop-entityreference',
        ), 
        /**
         * Stop
         */
        'tap_tourml_stop' => array(
            'variables' => array(
                'id' => 0,
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-stop',
        ),
        /**
         * Properties
         */
        'tap_tourml_property' => array(
            'variables' => array(
                'name'          => '',
                'value'         => '',
                'attributes'    => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-property',
        ),
        'tap_tourml_property_set' => array(
            'variables' => array(
                'properties' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-property-set',
        ),
        'tap_tourml_property_list_boolean'              => $properties,
        'tap_tourml_property_datetime'                  => $properties,
        'tap_tourml_property_date'                      => $properties,
        'tap_tourml_property_datestamp'                 => $properties,
        'tap_tourml_property_number_decimal'            => $properties,
        'tap_tourml_property_number_float'              => $properties,
        'tap_tourml_property_number_integer'            => $properties,
        'tap_tourml_property_list_float'                => $properties,
        'tap_tourml_property_list_integer'              => $properties,
        'tap_tourml_property_list_text'                 => $properties,
        'tap_tourml_property_text'                      => $properties,
        'tap_tourml_property_text_long'                 => $properties,
        'tap_tourml_property_taxonomy_term_reference'   => $properties,
        /**
         * Title
         */
        'tap_tourml_title' => array(
            'variables' => array(
                'language'  => 'en',
                'value'     => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-title',
        ),
        'tap_tourml_title_text'         => $properties,
        'tap_tourml_title_text_long'    => $properties,
        /**
         * Description
         */
        'tap_tourml_description' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-description',
        ),
        'tap_tourml_description_text'               => $properties,
        'tap_tourml_description_text_long'          => $properties,
        'tap_tourml_description_text_with_summary'  => $properties,
        /**
         * Assets
         */
        'tap_tourml_asset' => array(
            'variables' => array(
                'asset'     => array(),
                'language'  => '',
                'absolute'  => TRUE,
                'base_path' => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-asset',
        ),
        'tap_tourml_asset_ref' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-asset-file',
        ),
        'tap_tourml_asset_file'                 => $properties,
        'tap_tourml_asset_image'                => $properties,
        'tap_tourml_asset_text'                 => $properties,
        'tap_tourml_asset_text_long'            => $properties,
        'tap_tourml_asset_text_with_summary'    => $properties,
        /**
         * multipart Assets
         */
        'tap_tourml_multipart_asset' => array(
            'variables' => array(
                'asset_id'  => '',
                'asset'     => array(),
                'language'  => '',
                'absolute'  => TRUE,
                'base_path' => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-multipart-asset',
        ),
        'tap_tourml_multipart_asset_ref' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-multipart-asset-file',
        ),
        'tap_tourml_multipart_asset_file'               => $properties,
        'tap_tourml_multipart_asset_image'              => $properties,
        'tap_tourml_multipart_asset_text'               => $properties,
        'tap_tourml_multipart_asset_text_long'          => $properties,
        'tap_tourml_multipart_asset_text_with_summary'  => $properties,
        'tap_tourml_multipart_asset_field_collection'   => $properties,
        /**
         * Asset rights type
         */
        'tap_tourml_asset_rights' => array(
            'variables' => array(
                'file' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-asset-rights',
        ),
        /**
         * Copyright
         */
        'tap_tourml_copyright' => array(
            'variables' => array(
                'value' => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-copyright',
        ),
        'tap_tourml_copyright_text'                     => $properties,
        'tap_tourml_copyright_text_long'                => $properties,
        'tap_tourml_copyright_text_with_summary'        => $properties,
        /**
         * Credit line
         */
        'tap_tourml_credit_line' => array(
            'variables' => array(
                'value' => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-credit-line',
        ),
        'tap_tourml_credit_line_text'                   => $properties,
        'tap_tourml_credit_line_text_long'              => $properties,
        'tap_tourml_credit_line_text_with_summary'      => $properties,
        /**
         * Connections
         */
        'tap_tourml_connection_entityreference' => array(
            'variables' => array(
                'items' => array(),
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-connection-entityreference',
        ),
        /**
         * iOS plist
         */
        'ios_plist_xml' => array(
            'variables' => array(
                'bundle_name' => '',
                'bundle_id' => '',
            ),
            'file' => 'tap.templates.inc',
            'template' => 'templates/ios-plist-xml',
        ),
        /**
         * Tour Set
         */
        'tap_tourml_tourmlref' => array(
            'variables' => array(
                'tour_nid'  => '',
                'absolute'  => TRUE,
                'base_path' => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-tourmlref',
        ),
        'tap_tourml_tour_set' => array(
            'variables' => array(
                'tour_set'  => '',
            ),
            'file'  => 'tap.templates.inc',
            'template'  => 'templates/tap-tourml-tour-set',
        )
    );
}

/**
 * Implements hook_form_alter
 */
function tap_form_alter(&$form, &$form_state, $form_id) {
    if (strpos($form_id, 'node_form') && isset($form['field_tour']) && isset($_GET['tourNid'])) {
        $targetNode = node_load($_GET['tourNid']);
        $form['field_tour']['und'][0]['target_id']['#default_value'] = array($targetNode->title . ' (' . $targetNode->vid . ')');
    }
}

/*******************************
 * Contrib Hooks
 */

function tap_tourml_multipart_asset_alter(&$tour, &$item) {
    // Handle file fields
    if (isset($item['filemime'])) {

        list($type, $ext) = explode('/', $item['filemime']);
        switch ($type) {
            case 'image':
                _tap_asset_image($item);
                break;
            case 'video':
                _tap_asset_video($item);
                break;
            case 'audio':
                _tap_asset_audio($item);
                break;
        }
    }
}

/**
 * Implements hook_tourml_asset_alter()
 */
function tap_tourml_asset_alter(&$tour, &$item) {
    // Handle file fields
    if (isset($item['filemime'])) {

        list($type, $ext) = explode('/', $item['filemime']);
        switch ($type) {
            case 'image':
                _tap_asset_image($item);
                break;
            case 'video':
                _tap_asset_video($item);
                break;
            case 'audio':
                _tap_asset_audio($item);
                break;
        }
    }
}

/******************************
 * Fields
 */

/**
 * Implements hook_field_formatter_info()
 */
function tap_field_formatter_info() {
    $formatters = array(
        'tap_tourml_connection' => array(
            'label'         => t('TourML Connection'),
            'field types'   => array('entityreference'),
        ),
        'tap_tourml_property' => array(
            'label'         => t('TourML Property'),
            'field types'   => array(),
        ),
        'tap_tourml_asset' => array(
            'label'         => t('TourML Asset'),
            'field types'   => array(),
        ),
        'tap_tourml_multipart_asset' => array(
            'label'         => t('TourML Multipart Asset'),
            'field types'   => array(),
            'settings'      => array(
                'image_styles' => array(),
            ),
        ),
        'tap_tourml_title' => array(
            'label'         => t('TourML Title'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
        ),
        'tap_tourml_description' => array(
            'label'         => t('TourML Description'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
        ),
        'tap_tourml_copyright' => array(
            'label'         => t('TourML Copyright'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
        ),
        'tap_tourml_credit_line' => array(
            'label'         => t('TourML Credit Line'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
        ),
        'tap_tourml_machine_rights' => array(
            'label'         => t('TourML Machine Rights'),
            'field types'   => array('text', 'text_long', 'text_with_summary'),
        ),
        'tap_tourml_expiration' => array(
            'label'         => t('TourML Expiration'),
            'field types'   => array('date', 'datestamp', 'datetime'),
        ),
        'tap_tourml_watermark' => array(
            'label'         => t('TourML Watermark'),
            'field types'   => array('text', 'list_text', 'text_long', 'text_with_summary', 'file', 'entity', 'media'),
        ),
        'tap_tourml_root_stop' => array(
            'label'         => t('TourML Root Stop'),
            'field types'   => array('entityreference'),
        ),
    );
    return $formatters;
}

/**
 * Implements hook_field_formatter_info_alter()
 */
function tap_field_formatter_info_alter(&$info) {
    $types = array();
    $usableFormatters = array();
    foreach ($info as $name => $formatter) {
        $types = array_merge($types, $formatter['field types']);
        if (strpos($name, 'tap_tourml_') !== FALSE) {
            $usableFormatters[] = $name;
        }
    }
    $types = array_values(array_unique($types));

    foreach ($usableFormatters as $name) {
        // Make formatter available for all fields if an empty array is defined for field type
        if (empty($info[$name]['field types'])) {
            $info[$name]['field types'] = $types;
        }
    }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tap_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
    $display_form = FALSE;
    $display = $instance['display'][$view_mode];
    $formatter = $display['type'];

    if ($formatter === 'tap_tourml_multipart_asset' && $field['type'] === 'image') {
        $display_form = TRUE;
    } 
    elseif ($field['type'] === 'field_collection') {
        // retrieve the field instances for this field collection
        $instances = field_info_instances('field_collection_item', $field['field_name']);
        foreach ($instances as $field_instance) {
            $field_info = field_info_field($field_instance['field_name']);
            if ($field_info['type'] === 'image') {
                $display_form = TRUE;
            }
        }
    }

    if ($display_form) {
        $form = tap_default_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
        return $form;
    }
}

/**
 * Settings for the default formatter.
 */
function tap_default_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $formatter = $display['type'];

    $styles = array();
    foreach (image_styles() as $key => $style) {
        $styles[$key] = $style['name'];
    }
    $styles['original'] = 'original';

    $form = array();
    $form['image_styles'] = array(
        '#title' => t('Image Styles'),
        '#type' => 'select',
        '#options' => $styles,
        '#default_value' => $settings['image_styles'],
        '#description' => t('Specify optional image style(s) to add to the asset when exporting tourml.'),
        '#multiple' => TRUE,
        '#weight' => 0,
    );
    return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tap_field_formatter_settings_summary($field, $instance, $view_mode) {
    $display = $instance['display'][$view_mode];
    $formatter = $display['type'];

    if ($display['type'] === 'tap_tourml_multipart_asset' && $field['type'] === 'image') {
        return t('Select image styles.');
    } 
    elseif ($field['type'] === 'field_collection') {
        // retrieve the field instances for this field collection
        $instances = field_info_instances('field_collection_item', $field['field_name']);
        foreach ($instances as $field_instance) {
            $field_info = field_info_field($field_instance['field_name']);
            if ($field_info['type'] === 'image') {
                return t('Select image style(s) to be applied to all image fields for this collection.');
            }
        }
    }
}

/**
 * Implements hook_field_display_alter()
 */
function tap_field_display_alter(&$display, $context) {
    switch ($context['view_mode']) {
        case 'tourml_xml':
            // Override the field formatter with our tap formatter
            if (strpos($display['type'], 'tap_tourml_') !== FALSE) {
                //$display['type'] = $display['type'] . '_' . $context['field']['type'];
            }
            else {
                $display['type'] = 'hidden';
            }
            $display['module']  = 'tap';
            break;
    }
}

/**
 * Implements hook_field_formatter_view()
 */
function tap_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element['image_styles'] = empty($display['settings']['image_styles']) ? array() : $display['settings']['image_styles'];
    $element['#theme'] = $display['type'] . '_' . $field['type'];
    return $element;
}

/******************************
 * Blocks
 */

/**
 * Implements hook_block_info()
 */
function tap_block_info() {
  $blocks['addstop'] = array(
    'info' => t('Add Stop'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function tap_block_view($delta = '') {
  switch ($delta) {
    case 'addstop':
      $block['subject'] = t('Add Stop');
      $block['content'] = tap_block_contents($delta);
      break;
  }
  return $block;
}

function tap_block_contents($delta) {
    switch ($delta) {
        case 'addstop':
            $types = variable_get('tap_addstop_block_content_types', array('tour_audio_stop', 'tour_image_stop', 'tour_stop_group', 'tour_video_stop'));
            $allTypes = node_type_get_types();

            $options = array();
            $options = (arg(0) == 'node' && is_numeric(arg(1))) ? array('query' => array('destination' => $_GET['q'], 'tourNid' => arg(1))) : array();
            $links = array();

            foreach ($types as $v) {
                if ($v) {
                    $links[] = l($allTypes[$v]->name, 'node/add/' . str_replace("_", "-", $v), $options);
                }
            }

            return array('#markup' => theme('item_list', array('items' => $links)));
    }
}

function tap_block_configure($delta = '') {
    $form = array();
    switch ($delta) {
        case 'addstop':
            $types = node_type_get_types();
            $selectValues = array();
            foreach ($types as $k => $v) {
                $selectValues[$k] = $v->name;
            }
            $form['tap_addstop_block_content_types'] = array(
                '#type' => 'checkboxes',
                '#title' => t('The content types to display in the block.'),
                '#default_value' => variable_get('tap_addstop_block_content_types', array('tour_audio_stop', 'tour_image_stop', 'tour_stop_group', 'tour_video_stop')), 
                '#options' => $selectValues,
            );
            break;
    }

    return $form;
}

function tap_block_save($delta = '', $edit = array()) {
    // This example comes from node.module.
    if ($delta == 'addstop') {
        variable_set('tap_addstop_block_content_types', $edit['tap_addstop_block_content_types']);
    }
}

/*****************************
 * Helper functions
 ****************************/

/**
 * Retrieves the cached tourml for a particular node
 * @param  object $node The node being displayed
 * @return string       The rendered tourml
 */
function tap_get_tourml_cache($node) {
    $cid = 'tourml-' . $node->nid;

    // get the cached tourml
    $cache = cache_get($cid, 'cache');
    // check if tourml document has been updated
    if (empty($cache->data)) {
        // render the tourml
        $tourml = tap_tourml_render($node);
        // cache the tourml
        cache_set($cid, $tourml, 'cache', CACHE_PERMANENT);
    }
    else {
        // retrieve the cached tourml
        $tourml = $cache->data;
    } 
    return $tourml;
}

/**
 * @param $node
 * A node object
 * @param $settings
 *  return_object:
 *    If set to TRUE the tourml object will be returned instead of a string
 *  absolute:
 *    If FALSE assets will use relative paths
 *
 * @return
 * Returns a rendered TourML string
 */
function tap_tourml_render($node, $settings = array()) {
    $settings += array(
        'return_object' => FALSE,
        'absolute'  => TRUE,
    );

    module_load_include('inc', 'tap', 'includes/tourml.class');

    $tourml = new TourML($node->nid, $settings);

    //pretty up the output
    $doc = new DOMDocument();
    $doc->formatOutput = TRUE;
    $doc->preserveWhiteSpace = FALSE;
    $doc->loadXML($tourml->getTourML());

    return ($settings['return_object']) ? $tourml : $doc->saveXML();
}

/**
 * @param $node
 * A node object
 * @return
 * Returns a rendered TourML page
 */
function tap_tourml_preview($node) {
    $tourml = tap_get_tourml_cache($node);

    $output = l('XML', 'node/' . $node->nid . '/tourml.xml');
    $output .= '<pre class="brush: xml">' . htmlentities($tourml) . '</pre>';
    return $output;
}

/**
 * @param $tourml
 * an xml string
 */
function _tap_tourml_validate($tourml) {
    $doc = new DOMDocument();
    $doc->formatOutout = TRUE;
    $doc->preserveWhiteSpate = FALSE;
    $doc->loadXML($tourml);

    // Enable user error handling
    libxml_use_internal_errors(true);

    if (!$doc->schemaValidate(drupal_get_path('module', 'tap') . '/TourML.xsd')) {
      $output = tap_tourml_display_errors();
    }
    else {
      $output = 'TourML is Valid';
    }

    return $output;

}
/**
 * @param $node
 * A node object
 * @return
 * Validates a rendered TourML file
 */
function tap_tourml_node_validate($node) {
    $settings = array(
        'return_object' => FALSE,
        'absolute'  => TRUE,
    );

    module_load_include('inc', 'tap', 'includes/tourml.class');
    $tourml = new TourML($node->nid, $settings);

    return _tap_tourml_validate($tourml->getTourML());
}

/**
 * Form to validate any uploaded TourML file
 */
function tap_tourml_validate_form(&$form, &$form_state) {
    $form['tourml'] = array(
        '#type'         => 'file',
        '#title'        => t('TourML File'),
        '#description'  => t('Upload the TourML document you would like to validate'),
    );

    $form['or'] = array(
        '#type'     => 'item',
        '#markup'   => 'OR',
    );

    $form['tourml_url'] = array(
        '#type'     => 'textfield',
        '#title'    => t('URL to Tourml File'),
    );

    $form['submit'] = array(
        '#type'     => 'submit',
        '#value'    => t('Validate'),
    );

    return $form;
}

function tap_tourml_validate_form_validate(&$form, &$form_state) {
    if (!empty($_FILES['files']['tmp_name']['tourml'])) {
        if ($_FILES['files']['type']['tourml'] != 'text/xml') {
            form_set_error('tourml', 'Please upload a valid XML file');
        }
    }
}

function tap_tourml_validate_form_submit(&$form, &$form_state) {
    if (!empty($form_state['values']['tourml_url'])) {
        $tourml = file_get_contents($form_state['values']['tourml_url']);
    }
    elseif (!empty($_FILES['files']['tmp_name']['tourml'])) {
        $tourml = file_get_contents($_FILES['files']['tmp_name']['tourml']);
    }
    $output = check_plain(_tap_tourml_validate($tourml));

    drupal_set_message($output);
}

/**
 * Act on image assets
 *
 * @param $item
 * The asset item to enact upon
 *
 * @return Array
 * Return an array of key/value properties to be rendered with the asset
 */
function _tap_asset_image(&$item) {
    $path = drupal_realpath($item['uri']);
    $attr = image_get_info($path);
    $item['properties'] = array(
        'width'     => $attr['width'],
        'height'    => $attr['height'],
    );
}

/**
 * Act on video assets
 *
 * @param $item
 * The asset item to enact upon
 *
 * @return Array
 * Return an array of key/value properties to be rendered with the asset
 */
function _tap_asset_video(&$item) {
    if (!extension_loaded('ffmpeg')) return;

    $path = drupal_realpath($item['uri']);
    $movie = new ffmpeg_movie($path);
    $item['properties'] = array(
        'duration'      => _tap_duration($movie->getDuration()),
        'width'         => $movie->getFrameWidth(),
        'height'        => $movie->getFrameHeight(),
        'video_codec'   => $movie->getVideoCodec(),
        'audio_codec'   => $movie->getAudioCodec(),
    );
}

/**
 * Act on audio assets
 *
 * @param $item
 * The asset item to enact upon
 *
 * @return Array
 * Return an array of key/value properties to be rendered with the asset
 */
function _tap_asset_audio(&$item) {
    if (!extension_loaded('ffmpeg')) return;

    $path = drupal_realpath($item['uri']);
    $audio = new ffmpeg_movie($path);
    $item['properties'] = array(
        'duration'      => _tap_duration($audio->getDuration()),
        'audio_codec'   => $audio->getAudioCodec(),
    );
}

/**
 * Returns bundle options in a form api friendly array
 */
function _tap_bundle_form_options() {
    $values = array();
    $options = tap_get_bundle_options_info();
    foreach ($options as $key => $option) {
        $values[$key] = $options[$key]['title'];
    }

    return $values;
}

/**
 *
 * Initiate an instance of ZipArchive
 * .
 * @param $path
 * Path to a zip archive to open
 * @param $flag
 * Optional flags to be passed to open()
 */
function _tap_zip_init($path, $flag = ZIPARCHIVE::CHECKCONS) {
    $bundle = new ZipArchive();
    if ($bundle->open($path, $flag) !== TRUE) {
        drupal_set_message(check_plain("Could not use file $path"), 'error');
        return FALSE;
    }

    return $bundle;
}

/**
 * @param $secs
 * Takes a number of seconds
 *
 * @return
 * Returns the duration formatted in HH:MM:SS
 */
function _tap_duration($secs) {
    $vals = array(
        'h' => $secs / 3600 % 24,
        'm' => $secs / 60 % 60,
        's' => $secs % 60
    );

    $ret = array();

    $added = FALSE;
    foreach ($vals as $k => $v) {
        if ($v > 0 || $added) {
            $added = TRUE;
            $v = (strlen($v) == 1) ? '0' . $v : $v;
            $ret[] = $v;
        }
        else {
            $ret[] = '00';
        }
    }

    return join(':', $ret);
}

/**
 * Strips "field_" from text
 *
 * @param $text
 * The text to be parsed
 *
 * @return
 * The parsed text minue "field_"
 */
function _tap_anti_field($text) {
    return str_replace('field_', '', $text);
}

/**
 * Clean text for file names
 *
 * @param $text
 * The text to be parsed
 *
 * @return
 * The cleaned up text
 */
function _tap_clean_file_text($text) {
    return preg_replace('/\s+/', '', check_plain($text));
}

function tap_tourml_display_error($error) {
  $return = "<br/>\n";
  switch ($error->level) {
    case LIBXML_ERR_WARNING:
      $return .= "<b>Warning $error->code</b>: ";
      break;
    case LIBXML_ERR_ERROR: 
      $return .= "<b>Error $error->code</b>: ";
      break;
    case LIBXML_ERR_FATAL:
      $return .= "<b>Fatal Error $error->code</b>: ";
      break;
  }
  $return .= trim($error->message);
  if ($error->file) {
    $return .= " in <b>$error->file</b>";
  }
  $return .= " on line <b>$error->line</b>\n";

  return $return;
}

function tap_tourml_display_errors() {
  $errors = libxml_get_errors();
  $output = '';
  foreach ($errors as $error) {
    $output .= tap_tourml_display_error($error);
  }
  libxml_clear_errors();
  return $output;
}

function tap_tourml_property_alter(&$field) {
    switch ($field['#field_type']) {
        case 'date':
            $items = $field['#items'];
            $newItems = array();
            foreach ($items as $k => $v) {
                if (isset($v['value'])) {
                    $newItems[] = array(
                        'value' => $v['value'],
                        'name' => $v['name'] . '_start_' . $k
                    );
                }

                if (isset($v['value2'])) {
                    $newItems[] = array(
                        'value' => $v['value2'],
                        'name' => $v['name'] . '_end_' . $k
                    );
                }
            }
            $field['#items'] = $newItems;
            break;
    }
}

function tap_redirect_parse_url_alter(&$parsed, &$original_url) {
    if (substr($parsed['path'], -1) === "/") {
        $parsed['url'] = $parsed['url'] . "/";
    }
}
