<?php

define('TAP_BEACONS_VERSION', '0.1.0');

/**
 * Implements hook_menu()
 */
function tap_beacons_menu() {
    $items['admin/tap/beacons'] = array(
        'title'             => 'Beacons',
        'page callback'     => 'tap_beacons_admin_section',
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons/add'] = array(
        'title'             => 'Add Beacons',
        'page callback'     => 'tap_beacons_admin_add',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons/delete'] = array(
        'title'             => 'Delete Beacons',
        'page callback'     => 'tap_beacons_admin_delete',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons/update'] = array(
        'title'             => 'Update Beacons',
        'page callback'     => 'tap_beacons_admin_update',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons-reference'] = array(
        'title'             => 'Beacons Reference',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_beacons_admin_form'),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function tap_beacons_theme() {

    $beacons = tap_beacons_get_beacons();

    $items = array(
        'tap_beacons_admin_content' => array(
            'variables' => array(
                'beacons_data' => $beacons,
            ),
            'template'  => 'templates/tap_beacons_template',
        ),
    );

    return $items;
}

/**
* Get beacon data from DB
*/
function tap_beacons_get_beacons(){

    // Get beacon data from DB
    $result = db_select('tap_beacons', 'b')
        ->fields('b', array('beacon_id', 'uuid', 'major_num', 'minor_num'))
        ->execute();

    // Loop through each row and store the formatted data
    foreach ($result as $row) {
        $anchor = '<div class="tap-beacons-operations">';
        $anchor .= '<a href="/?q=admin/tap/beacons/update&id='. $row->beacon_id .'" class="tap-beacons-update-btn">edit</a> | ';
        $anchor .= '<a href="/?q=admin/tap/beacons/delete&id='. $row->beacon_id .'" class="tap-beacons-delete-btn">delete</a>';
        $anchor .= '</div>';

        $row_array[] = array($row->uuid, $row->major_num, $row->minor_num, $anchor);
    }

    // Build table with data
    $table = array(
        '#theme' => 'table',
        '#header' => array(t('UUID'), t('Major Number'), t('Minor Number'), t('Operations')),
        '#rows' => $row_array
    );

    return $table;
}

/**
* Function to add beacon multiselect to set content types
*/
function tap_beacons_form_alter(&$form, &$form_state, $form_id) {

    // Get set content types
    $var = variable_get('tap_beacons_content_types');

    // Check if content type ites are set
    if (isset($form['#node']) && isset($var)) {

        // Get node content type
        $type = $form['#node']->type;

        // If the content type is one that is check in beacon references
        if ($var[$type] !== 0) {

            // Get the beacon that are set up
            $result = db_select('tap_beacons', 'b')
                ->fields('b', array('beacon_id', 'uuid', 'major_num', 'minor_num'))
                ->execute();

            // Loop through the beacons and store formatted data
            foreach ($result as $row) {
                $beacon_options[$row->beacon_id] = $row->uuid . " / " . $row->major_num . " / " . $row->minor_num;
            }

            // Use info to create multiselect box on edit page
            $form['tap_beacons'] = array(
                '#type' => 'select',
                '#multiple' => TRUE,
                '#title' => t('Associated Beacons (UUID / Major Number / Minor Number)'),
                '#required' => FALSE,
                '#options' => $beacon_options,
                '#size' => 10
            );
        }
    }

}
