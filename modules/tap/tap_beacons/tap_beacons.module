<?php

define('TAP_BEACONS_VERSION', '0.1.0');

/**
 * Implements hook_menu()
 */
function tap_beacons_menu() {
    $items['admin/tap/beacons'] = array(
        'title'             => 'Beacons',
        'page callback'     => 'tap_beacons_admin_section',
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.admin.inc',
    );

    // Beacon entries
    $items['admin/tap/beacons/add'] = array(
        'title'             => 'Add Beacons',
        'page callback'     => 'tap_beacons_admin_add',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons/delete'] = array(
        'title'             => 'Delete Beacons',
        'page callback'     => 'tap_beacons_admin_delete',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    $items['admin/tap/beacons/update'] = array(
        'title'             => 'Update Beacons',
        'page callback'     => 'tap_beacons_admin_update',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    // Content Type References
    $items['admin/tap/beacons/reference'] = array(
        'title'             => ' Beacons Reference',
        'page callback'     => 'drupal_get_form',
        'page arguments'    => array('tap_beacons_admin_form'),
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.admin.inc',
    );

    // Token
    $items['admin/tap/beacons/tokens'] = array(
        'title'             => 'Beacons Token',
        'page callback'     => 'tap_beacons_admin_set_token',
        'access arguments'  => array('administer tap'),
        'file'              => 'tap_beacons.admin.inc',
    );

    // API
    $items['beacons/api/beacons'] = array(
        'title'             => 'Get Beacon Events',
        'page callback'     => 'tap_beacons_api_beacon_events',
        'access arguments'  => array('access content'),
        'file'              => 'tap_beacons.api.inc',
    );

    $items['beacons/api/interactions'] = array(
        'title'             => 'Get Interaction Events',
        'page callback'     => 'tap_beacons_api_interaction_events',
        'access arguments'  => array('access content'),
        'file'              => 'tap_beacons.api.inc',
    );

    // Analytics
    $items['admin/tap/beacons/analytics'] = array(
        'title'             => 'Beacon Analytics',
        'page callback'     => 'tap_beacons_analytics_beacon_events',
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.analytics.inc',
    );

    $items['admin/tap/beacons/interactions'] = array(
        'title'             => 'Interaction Analytics',
        'page callback'     => 'tap_beacons_analytics_interaction_events',
        'access arguments'  => array('administer tap'),
        'type'              => MENU_LOCAL_TASK,
        'file'              => 'tap_beacons.analytics.inc',
    );

    return $items;
}

/**
 * Implements hook_theme()
 */
function tap_beacons_theme() {

    $beacons = tap_beacons_get_beacons();
    $token = tap_beacons_get_tokens();

    $items = array(
        'tap_beacons_admin_content' => array(
            'variables' => array(
                'beacons_data' => $beacons,
                'token_data' => $token,
            ),
            'template'  => 'templates/tap_beacons_template',
        ),
    );

    return $items;
}

/**
* Function to fetch beacons from DB
*/
function tap_beacons_fetch_beacon_data(){
    $result = db_select('tap_beacons', 'b')
        ->fields('b', array('beacon_id', 'name', 'uuid', 'major_num', 'minor_num'))
        ->execute()
        ->fetchAll();

    return $result;
}

/**
* Function to display beacon data
*/
function tap_beacons_get_beacons(){

    // Get beacon data from DB
    $result = tap_beacons_fetch_beacon_data();

    $row_array = array();

    $baseUpdateUrl = url("admin/tap/beacons/update");
    $baseUpdateUrl = (strpos($baseUpdateUrl, "?") === false) ? $baseUpdateUrl . "?" : $baseUpdateUrl . "&";
    $baseDeleteUrl = url("admin/tap/beacons/delete");
    $baseDeleteUrl = (strpos($baseDeleteUrl, "?") === false) ? $baseDeleteUrl . "?" : $baseDeleteUrl . "&";

    // Loop through each row and store the formatted data
    foreach ($result as $row) {

        // Create anchors for edit and delete
        $anchor = '<div class="tap-beacons-operations">';
        $anchor .= '<a href="' . $baseUpdateUrl . 'id='. $row->beacon_id .'" class="tap-beacons-update-btn">edit</a> | ';
        $anchor .= '<a href="' . $baseDeleteUrl . 'id='. $row->beacon_id .'" class="tap-beacons-delete-btn">delete</a>';
        $anchor .= '</div>';

        // Query stop data to create links back to related stops
        $stop_query = db_select('tap_beacons_stop_beacon', 's');
        $stop_query->join('node', 'n', 'n.nid = s.stop_nid');
        $stop_query->fields('s', array('stop_nid'))
            ->fields('n', array('title'));
        $stop_query->condition('s.beacon_id', $row->beacon_id, '=');
        $stop_result = $stop_query->execute();

        // Store uuid
        $uuid = '<div class="uuid">' . $row->uuid . "</div>";

        // Create stop link array
        $stop_link = array();

        // Loop through those stops and create their links
        foreach ($stop_result as $stop_row) {
            $stop_url = url('node/' . $stop_row->stop_nid);
            $stop_link[] = '<a href="' . $stop_url . '">' . $stop_row->title . '</a>';
        }

        if (!empty($stop_link)) {
            // Add the stop links into the uuid variable and separate each stop by a comma.
            $uuid .= '<small>' . implode(', ', $stop_link) . '</small>';
        }

        $row_array[] = array($row->beacon_id, $row->name, $uuid, $row->major_num, $row->minor_num, $anchor);
    }

    // Build table with data
    $table = array(
        '#theme' => 'table',
        '#header' => array(t('ID'), t('Name'), t('UUID'), t('Major Number'), t('Minor Number'), t('Operations')),
        '#rows' => $row_array,
        '#attributes' => array (
            'class' => array('tap-beacons-table')
        ),
    );

    return $table;
}

/**
* Function to add beacon multiselect to set content types
*/
function tap_beacons_form_alter(&$form, &$form_state, $form_id) {

    // Get set content types
    $var = variable_get('tap_beacons_content_types');

    // Check if content type items are set
    if (isset($form['#node']) && isset($var)) {

        // Get node content type
        $type = $form['#node']->type;

        // Check to make sure field only shows on form edit page
        if (strpos($form_id, 'node_form') !== false) {

            // If the content type is one that is check in beacon references
            if ($var[$type] !== 0) {

                // Get the beacon that are set up
                $result = tap_beacons_fetch_beacon_data();

                // Loop through the beacons and store formatted data
                foreach ($result as $row) {
                    $beacon_options[$row->beacon_id] = $row->name . " - " . $row->uuid . " / " . $row->major_num . " / " . $row->minor_num;
                }

                $selected_options = array();

                // Check if node ID has already been set
                if (isset($form['#node']->nid)) {
                    // Call DB to get peviously selected values
                    $selected = db_select('tap_beacons_stop_beacon', 's')
                        ->fields('s', array('beacon_id'))
                        ->where('stop_nid = ' . $form['#node']->nid)
                        ->execute();

                    // Set default items if they exist
                    foreach ($selected as $row) {
                        $selected_options[] = $row->beacon_id;
                    }
                }

                // Use info to create multiselect box on edit page
                $form['tap_beacons'] = array(
                    '#type' => 'select',
                    '#multiple' => TRUE,
                    '#title' => t('Associated Beacons (Name - UUID / Major Number / Minor Number)'),
                    '#required' => FALSE,
                    '#options' => $beacon_options,
                    '#size' => 10,
                    '#default_value' => $selected_options,
                );
            }
        }
    }
}

/**
* Function to add beacon to stop references into the database
*/
function tap_beacons_add_beacon_stop($node){
    // Get set content types
    $var = variable_get('tap_beacons_content_types');

    // Get node content type
    $type = $node->type;

    if ($var[$type] !== 0 && isset($_POST['tap_beacons'])) {
        // Store selected beacons
        $beacons = $_POST['tap_beacons'];

        if (isset($node->nid)){
            // Delete any existing beacon associations for the stop
            tap_beacons_node_delete($node);

            // Add new references in separate rows
            foreach ($beacons as $beacon) {
                $query = db_insert('tap_beacons_stop_beacon')
                    ->fields(array(
                      'stop_nid' => $node->nid,
                      'beacon_id' => $beacon
                    ))
                    ->execute();
            }
        }
    }
}

/**
* Function to delete beacon to stop references in the database
*/
function tap_beacons_node_delete($node) {
    $query = db_delete('tap_beacons_stop_beacon')
        ->condition('stop_nid', $node->nid)
        ->execute();
}

/**
* Function to add beacon reference on node creation
*/
function tap_beacons_node_insert($node) {

    tap_beacons_add_beacon_stop($node);
}

/**
* Function to add beacon reference on node update
*/
function tap_beacons_node_submit($node) {

    tap_beacons_add_beacon_stop($node);
}

/**
* Function to alter node (tour) object and add beacons to tourml as asset
*/
function tap_beacons_tourml_tour_alter(&$node){

    // Run select query for beacons
    $result = tap_beacons_fetch_beacon_data();

    if (!empty($result)) {

        // Build XML snippet for TourML
        $doc = '<beacons>';

        foreach($result as $row){
            $doc .= '<beacon id="'. $row->beacon_id .
                    '" name="' . $row->name .
                    '" uuid="' . $row->uuid .
                    '" major="' . $row->major_num .
                    '" minor="'. $row->minor_num .
                    '" />';
        }

        $doc .= '</beacons>';

        // Set up node field attributes in content object
        $node->content['field_beacons'] = array();
        $node->content['field_beacons']['#items'] = array();
        $node->content['field_beacons']['image_style'] = array();

        $node->content['field_beacons']['#field_name'] = 'beacons';
        $node->content['field_beacons']['#theme'] = 'tap_tourml_asset_text_long';
        $node->content['field_beacons']['#formatter'] = 'tap_tourml_asset';
        $node->content['field_beacons']['#view_mode'] = 'tourml_xml';
        $node->content['field_beacons']['#title'] = 'beacons';
        $node->content['field_beacons']['#weight'] = 0;
        $node->content['field_beacons']['#access'] = TRUE;
        $node->content['field_beacons']['#language'] = 'und';
        $node->content['field_beacons']['#field_type'] = 'xml';
        $node->content['field_beacons']['#field_translatable'] = 0;
        $node->content['field_beacons']['#entity_type'] = "node";
        $node->content['field_beacons']['#bundle'] = "tour";
        $node->content['field_beacons']['#object'] = $node;
        $node->content['field_beacons']['#items'][0]['value'] = $doc;
        $node->content['field_beacons']['#items'][0]['format'] = null;
        $node->content['field_beacons']['#items'][0]['safe_value'] = $doc;
        $node->content['field_beacons']['#items'][0]['filemime'] = 'text/xml';
    }
}

/**
* Function to alter node (stop) objects and add beacons to tourml as properties
*/
function tap_beacons_tourml_stop_meta_alter(&$node){

    // Run select query for beacons to stop references
    $result = db_select('tap_beacons_stop_beacon', 's')
        ->fields('s', array('beacon_id'))
        ->condition('stop_nid', $node->nid)
        ->execute()
        ->fetchAll();

    if (!empty($result)) {

        // Add properties to stop with beacons
        $node->content['field_beacon_id'] = array();
        $node->content['field_beacons']['#items'] = array();
        $node->content['field_beacon_id']['image_style'] = array();

        $i = 0;
        foreach($result as $row){
            $id = $row->beacon_id;

            $node->content['field_beacon_id']['#field_name'] = 'field_beacon_id';
            $node->content['field_beacon_id']['#theme'] = 'tap_tourml_property_text';
            $node->content['field_beacon_id']['#formatter'] = 'tap_tourml_property';
            $node->content['field_beacon_id']['#view_mode'] = 'tourml_xml';
            $node->content['field_beacon_id']['#title'] = 'beacons';
            $node->content['field_beacon_id']['#weight'] = 0;
            $node->content['field_beacon_id']['#access'] = TRUE;
            $node->content['field_beacon_id']['#language'] = 'und';
            $node->content['field_beacon_id']['#field_type'] = 'text';
            $node->content['field_beacon_id']['#field_translatable'] = 0;
            $node->content['field_beacon_id']['#entity_type'] = "node";
            $node->content['field_beacon_id']['#object'] = $node;
            $node->content['field_beacon_id']['#items'][$i]['value'] = $id;
            $node->content['field_beacon_id']['#items'][$i]['format'] = null;
            $node->content['field_beacon_id']['#items'][$i]['safe_value'] = $id;

            $i++;
        }
    }
}

/**
* Function to get token data from DB
*/
function tap_beacons_get_tokens(){

    // Get beacon data from DB
    $result = db_select('tap_beacons_tokens', 't')
        ->fields('t', array('token_id', 'token'))
        ->execute();

    $token = array();

    foreach ($result as $row) {
        $token['id'] = $row->token_id;
        $token['token'] = $row->token;
    }

    return $token;
}
