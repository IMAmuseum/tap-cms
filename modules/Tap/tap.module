<?php

/************************************
 * Drupal Hooks
 */

/**
 * Implements hook_menu()
 */
function tap_menu() {

  $items['tourml/tour/%node'] = array(
    'page callback' => 'tap_tourml_export',
    'page arguments' => array('node', 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'tap.tourml.inc',
  );

  $items['node/%node/tourml_xml'] = array(
    'title' => 'TourML XML',
    'page callback' => 'node_view',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tap.tourml.inc',
  );

  $items['node/%node/tourml_bundle'] = array(
    'title' => 'TourML Bundle',
    'page callback' => 'node_view',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tap.tourml.inc',
  );

  return $items;
}

/******************************
 * Entities 
 */

/**
 * Implements hook_entity_info_alter()
 */
function tap_entity_info_alter(&$entity_info) {
    $entity_info['node']['view modes']['tourml_xml'] = array(
        'label'             => t('TourML XML'),
        'custom settings'   => TRUE,
    ); 

    $entity_info['node']['view modes']['tourml_bundle'] = array(
        'label'             => t('TourML Bundle'),
        'custom settings'   => TRUE,
    );
}

/******************************
 * Nodes 
 */

/**
 * Implements hook_node_view()
 */
function tap_node_view($node, $view_mode, $langcode) {
    switch($view_mode) {
        case 'tourml_xml':
        case 'tourml_bundle':
            foreach (element_children($node->content) as $key) {
                if ($node->content[$key]['#theme'] == 'field') {
                    $node->content[$key]['#formatter'] = $node->content[$key]['#field_type']  . '_' . $view_mode;
                }
            }
            break;
    }
}

/******************************
 * Fields 
 */

/**
 * Implements hook_field_formatter_info()
 */
function tap_field_formatter_info() {
    $formatters = array(
       'text_tourml_xml' => array(
            'label'         => t('Text TourML XML'),
            'field types'   => array('text', 'text_long', 'text_summary'),
        ),
        'file_tourml_xml' => array(
            'label'         => t('File TourML XML'),
            'field types'   => array('file'),
        ),
    );
    return $formatters;
}

/**
 * Implements hook_field_formatter_view()
 */
function tap_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    dpm($instance);
}

/******************************
 * Blocks
 */

/**
 * Implements hook_block_info()
 */
function tap_block_info() {
  $blocks['addstop'] = array(
    'info' => t('Add Stop'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function tap_block_view($delta = '') {
  switch ($delta) {
    case 'addstop':
      $block['subject'] = t('Add Stop');
      $block['content'] = tap_block_contents($delta);
      break;
  }
  return $block;
}

function tap_block_contents($delta) {
  switch ($delta) {
    case 'addstop':

      $options = array();
//    $options = (arg(0) == 'node' && is_numeric(arg(1))) ? array('query' => 'destination='.$_GET['q']) : array();
      $links = array(
        l('Image Stop', 'node/add/tour-image-stop', $options),
        l('Video Stop', 'node/add/tour-video-stop', $options),
        l('Audio Stop', 'node/add/tour-audio-stop', $options),
        l('Stop Group', 'node/add/tour-stop-group', $options),
      );
      return array('#markup' => theme('item_list', array('items' => $links)));
  }
}


/*****************************
 * Helper functions
 ****************************/
